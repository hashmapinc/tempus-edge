// Code generated by protoc-gen-go. DO NOT EDIT.
// source: MqttConfig.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// define available security types
type MqttConfig_SecurityType int32

const (
	MqttConfig_NONE  MqttConfig_SecurityType = 0
	MqttConfig_TOKEN MqttConfig_SecurityType = 1
)

var MqttConfig_SecurityType_name = map[int32]string{
	0: "NONE",
	1: "TOKEN",
}
var MqttConfig_SecurityType_value = map[string]int32{
	"NONE":  0,
	"TOKEN": 1,
}

func (x MqttConfig_SecurityType) String() string {
	return proto1.EnumName(MqttConfig_SecurityType_name, int32(x))
}
func (MqttConfig_SecurityType) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 0} }

// Define the configuration needed to work with MQTT services.
type MqttConfig struct {
	Subscriptions []*MqttConfig_SubPub    `protobuf:"bytes,1,rep,name=subscriptions" json:"subscriptions,omitempty"`
	Publishers    []*MqttConfig_SubPub    `protobuf:"bytes,2,rep,name=publishers" json:"publishers,omitempty"`
	Broker        *MqttConfig_Broker      `protobuf:"bytes,3,opt,name=broker" json:"broker,omitempty"`
	SecurityType  MqttConfig_SecurityType `protobuf:"varint,4,opt,name=security_type,json=securityType,enum=com.hashmapinc.tempus.edge.proto.MqttConfig_SecurityType" json:"security_type,omitempty"`
	User          *MqttConfig_User        `protobuf:"bytes,5,opt,name=user" json:"user,omitempty"`
	// define reconnection params
	MaxRetries uint32 `protobuf:"varint,6,opt,name=max_retries,json=maxRetries" json:"max_retries,omitempty"`
	RetryDelay uint64 `protobuf:"varint,7,opt,name=retry_delay,json=retryDelay" json:"retry_delay,omitempty"`
}

func (m *MqttConfig) Reset()                    { *m = MqttConfig{} }
func (m *MqttConfig) String() string            { return proto1.CompactTextString(m) }
func (*MqttConfig) ProtoMessage()               {}
func (*MqttConfig) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *MqttConfig) GetSubscriptions() []*MqttConfig_SubPub {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

func (m *MqttConfig) GetPublishers() []*MqttConfig_SubPub {
	if m != nil {
		return m.Publishers
	}
	return nil
}

func (m *MqttConfig) GetBroker() *MqttConfig_Broker {
	if m != nil {
		return m.Broker
	}
	return nil
}

func (m *MqttConfig) GetSecurityType() MqttConfig_SecurityType {
	if m != nil {
		return m.SecurityType
	}
	return MqttConfig_NONE
}

func (m *MqttConfig) GetUser() *MqttConfig_User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *MqttConfig) GetMaxRetries() uint32 {
	if m != nil {
		return m.MaxRetries
	}
	return 0
}

func (m *MqttConfig) GetRetryDelay() uint64 {
	if m != nil {
		return m.RetryDelay
	}
	return 0
}

// define the structure of a subscription or publisher
type MqttConfig_SubPub struct {
	Topic string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Qos   int32  `protobuf:"varint,2,opt,name=qos" json:"qos,omitempty"`
}

func (m *MqttConfig_SubPub) Reset()                    { *m = MqttConfig_SubPub{} }
func (m *MqttConfig_SubPub) String() string            { return proto1.CompactTextString(m) }
func (*MqttConfig_SubPub) ProtoMessage()               {}
func (*MqttConfig_SubPub) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 0} }

func (m *MqttConfig_SubPub) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *MqttConfig_SubPub) GetQos() int32 {
	if m != nil {
		return m.Qos
	}
	return 0
}

// define mqtt broker details
type MqttConfig_Broker struct {
	Host string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *MqttConfig_Broker) Reset()                    { *m = MqttConfig_Broker{} }
func (m *MqttConfig_Broker) String() string            { return proto1.CompactTextString(m) }
func (*MqttConfig_Broker) ProtoMessage()               {}
func (*MqttConfig_Broker) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 1} }

func (m *MqttConfig_Broker) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *MqttConfig_Broker) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// define mqtt user
type MqttConfig_User struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *MqttConfig_User) Reset()                    { *m = MqttConfig_User{} }
func (m *MqttConfig_User) String() string            { return proto1.CompactTextString(m) }
func (*MqttConfig_User) ProtoMessage()               {}
func (*MqttConfig_User) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 2} }

func (m *MqttConfig_User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *MqttConfig_User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func init() {
	proto1.RegisterType((*MqttConfig)(nil), "com.hashmapinc.tempus.edge.proto.MqttConfig")
	proto1.RegisterType((*MqttConfig_SubPub)(nil), "com.hashmapinc.tempus.edge.proto.MqttConfig.SubPub")
	proto1.RegisterType((*MqttConfig_Broker)(nil), "com.hashmapinc.tempus.edge.proto.MqttConfig.Broker")
	proto1.RegisterType((*MqttConfig_User)(nil), "com.hashmapinc.tempus.edge.proto.MqttConfig.User")
	proto1.RegisterEnum("com.hashmapinc.tempus.edge.proto.MqttConfig_SecurityType", MqttConfig_SecurityType_name, MqttConfig_SecurityType_value)
}

func init() { proto1.RegisterFile("MqttConfig.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x31, 0x8f, 0xd3, 0x30,
	0x14, 0xc7, 0x31, 0x4d, 0xc2, 0xf5, 0xdd, 0x15, 0x45, 0x16, 0x83, 0xd5, 0x85, 0xa8, 0x2c, 0x99,
	0x12, 0xb8, 0x9b, 0x58, 0x18, 0x0e, 0x3a, 0x55, 0xb4, 0xc8, 0x2d, 0x03, 0x0c, 0x54, 0x49, 0x6a,
	0x1a, 0x8b, 0x26, 0x76, 0x6d, 0x47, 0x34, 0x9f, 0x8d, 0x2f, 0x87, 0xec, 0x44, 0x6d, 0x98, 0x50,
	0x6f, 0xca, 0x7b, 0xcf, 0xfe, 0xfd, 0xf2, 0xf4, 0x4f, 0x20, 0xfc, 0x7c, 0x34, 0xe6, 0xa3, 0xa8,
	0x7f, 0xf2, 0x7d, 0x22, 0x95, 0x30, 0x02, 0x47, 0x85, 0xa8, 0x92, 0x32, 0xd3, 0x65, 0x95, 0x49,
	0x5e, 0x17, 0x89, 0x61, 0x95, 0x6c, 0x74, 0xc2, 0x76, 0x7b, 0xd6, 0xdd, 0x98, 0xfd, 0xf1, 0x01,
	0x2e, 0x18, 0xfe, 0x06, 0x13, 0xdd, 0xe4, 0xba, 0x50, 0x5c, 0x1a, 0x2e, 0x6a, 0x4d, 0x50, 0x34,
	0x8a, 0x6f, 0xef, 0x1f, 0x92, 0xff, 0x89, 0x92, 0xc1, 0xbb, 0xd7, 0x4d, 0xfe, 0xa5, 0xc9, 0xe9,
	0xbf, 0x26, 0xbc, 0x06, 0x90, 0x4d, 0x7e, 0xe0, 0xba, 0x64, 0x4a, 0x93, 0xe7, 0x4f, 0xf7, 0x0e,
	0x34, 0x78, 0x01, 0x41, 0xae, 0xc4, 0x2f, 0xa6, 0xc8, 0x28, 0x42, 0x57, 0x0b, 0x1f, 0x1d, 0x4a,
	0x7b, 0x05, 0xfe, 0x01, 0x13, 0xcd, 0x8a, 0x46, 0x71, 0xd3, 0x6e, 0x4d, 0x2b, 0x19, 0xf1, 0x22,
	0x14, 0xbf, 0xbc, 0x7f, 0x7f, 0xdd, 0x92, 0xbd, 0x61, 0xd3, 0x4a, 0x46, 0xef, 0xf4, 0xa0, 0xc3,
	0x73, 0xf0, 0x1a, 0xcd, 0x14, 0xf1, 0xdd, 0xaa, 0xef, 0xae, 0xd2, 0x7e, 0xd5, 0x4c, 0x51, 0x87,
	0xe3, 0xd7, 0x70, 0x5b, 0x65, 0xa7, 0xad, 0x62, 0x46, 0x71, 0xa6, 0x49, 0x10, 0xa1, 0x78, 0x42,
	0xa1, 0xca, 0x4e, 0xb4, 0x9b, 0xd8, 0x0b, 0xf6, 0xb0, 0xdd, 0xee, 0xd8, 0x21, 0x6b, 0xc9, 0x8b,
	0x08, 0xc5, 0x1e, 0x05, 0x37, 0xfa, 0x64, 0x27, 0xd3, 0xb7, 0x10, 0x74, 0x59, 0xe2, 0x57, 0xe0,
	0x1b, 0x21, 0x79, 0x41, 0x50, 0x84, 0xe2, 0x31, 0xed, 0x1a, 0x1c, 0xc2, 0xe8, 0x28, 0xec, 0x37,
	0x42, 0xb1, 0x4f, 0x6d, 0x69, 0x89, 0x2e, 0x2c, 0x8c, 0xc1, 0x2b, 0x85, 0x36, 0x3d, 0xe0, 0x6a,
	0x3b, 0x93, 0x42, 0x99, 0x1e, 0x70, 0xf5, 0xf4, 0x03, 0x78, 0x76, 0x67, 0x3c, 0x85, 0x1b, 0xbb,
	0x75, 0x9d, 0x55, 0xac, 0x67, 0xce, 0xbd, 0x3d, 0x93, 0x99, 0xd6, 0xbf, 0x85, 0xda, 0x39, 0x76,
	0x4c, 0xcf, 0xfd, 0xec, 0x0d, 0xdc, 0x0d, 0xa3, 0xc4, 0x37, 0xe0, 0x2d, 0x57, 0xcb, 0x79, 0xf8,
	0x0c, 0x8f, 0xc1, 0xdf, 0xac, 0x16, 0xf3, 0x65, 0x88, 0x1e, 0x67, 0xdf, 0xed, 0x1f, 0x9e, 0x5e,
	0x42, 0x4c, 0xbb, 0x10, 0x53, 0x1b, 0x62, 0xea, 0x42, 0xcc, 0x03, 0xf7, 0x78, 0xf8, 0x1b, 0x00,
	0x00, 0xff, 0xff, 0x96, 0x9f, 0x19, 0x6e, 0x1e, 0x03, 0x00, 0x00,
}
