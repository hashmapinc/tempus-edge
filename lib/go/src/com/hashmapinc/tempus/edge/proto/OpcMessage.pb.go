// Code generated by protoc-gen-go. DO NOT EDIT.
// source: OpcMessage.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Define an OPC message from an OPC client
type OpcMessage struct {
	// define info about the OPC entity
	Node       *OpcConfig_OpcNode `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	DeviceName string             `protobuf:"bytes,2,opt,name=device_name,json=deviceName" json:"device_name,omitempty"`
	// datetime
	SourceDatetime string `protobuf:"bytes,3,opt,name=source_datetime,json=sourceDatetime" json:"source_datetime,omitempty"`
	ServerDatetime string `protobuf:"bytes,4,opt,name=server_datetime,json=serverDatetime" json:"server_datetime,omitempty"`
	// value
	//
	// Types that are valid to be assigned to Value:
	//	*OpcMessage_ValueString
	//	*OpcMessage_ValueInt32
	//	*OpcMessage_ValueInt64
	//	*OpcMessage_ValueFloat
	//	*OpcMessage_ValueDouble
	//	*OpcMessage_ValueBoolean
	Value isOpcMessage_Value `protobuf_oneof:"value"`
}

func (m *OpcMessage) Reset()                    { *m = OpcMessage{} }
func (m *OpcMessage) String() string            { return proto1.CompactTextString(m) }
func (*OpcMessage) ProtoMessage()               {}
func (*OpcMessage) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

type isOpcMessage_Value interface {
	isOpcMessage_Value()
}

type OpcMessage_ValueString struct {
	ValueString string `protobuf:"bytes,5,opt,name=value_string,json=valueString,oneof"`
}
type OpcMessage_ValueInt32 struct {
	ValueInt32 int32 `protobuf:"varint,6,opt,name=value_int32,json=valueInt32,oneof"`
}
type OpcMessage_ValueInt64 struct {
	ValueInt64 int64 `protobuf:"varint,7,opt,name=value_int64,json=valueInt64,oneof"`
}
type OpcMessage_ValueFloat struct {
	ValueFloat float32 `protobuf:"fixed32,8,opt,name=value_float,json=valueFloat,oneof"`
}
type OpcMessage_ValueDouble struct {
	ValueDouble float64 `protobuf:"fixed64,9,opt,name=value_double,json=valueDouble,oneof"`
}
type OpcMessage_ValueBoolean struct {
	ValueBoolean bool `protobuf:"varint,10,opt,name=value_boolean,json=valueBoolean,oneof"`
}

func (*OpcMessage_ValueString) isOpcMessage_Value()  {}
func (*OpcMessage_ValueInt32) isOpcMessage_Value()   {}
func (*OpcMessage_ValueInt64) isOpcMessage_Value()   {}
func (*OpcMessage_ValueFloat) isOpcMessage_Value()   {}
func (*OpcMessage_ValueDouble) isOpcMessage_Value()  {}
func (*OpcMessage_ValueBoolean) isOpcMessage_Value() {}

func (m *OpcMessage) GetValue() isOpcMessage_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *OpcMessage) GetNode() *OpcConfig_OpcNode {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *OpcMessage) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *OpcMessage) GetSourceDatetime() string {
	if m != nil {
		return m.SourceDatetime
	}
	return ""
}

func (m *OpcMessage) GetServerDatetime() string {
	if m != nil {
		return m.ServerDatetime
	}
	return ""
}

func (m *OpcMessage) GetValueString() string {
	if x, ok := m.GetValue().(*OpcMessage_ValueString); ok {
		return x.ValueString
	}
	return ""
}

func (m *OpcMessage) GetValueInt32() int32 {
	if x, ok := m.GetValue().(*OpcMessage_ValueInt32); ok {
		return x.ValueInt32
	}
	return 0
}

func (m *OpcMessage) GetValueInt64() int64 {
	if x, ok := m.GetValue().(*OpcMessage_ValueInt64); ok {
		return x.ValueInt64
	}
	return 0
}

func (m *OpcMessage) GetValueFloat() float32 {
	if x, ok := m.GetValue().(*OpcMessage_ValueFloat); ok {
		return x.ValueFloat
	}
	return 0
}

func (m *OpcMessage) GetValueDouble() float64 {
	if x, ok := m.GetValue().(*OpcMessage_ValueDouble); ok {
		return x.ValueDouble
	}
	return 0
}

func (m *OpcMessage) GetValueBoolean() bool {
	if x, ok := m.GetValue().(*OpcMessage_ValueBoolean); ok {
		return x.ValueBoolean
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OpcMessage) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _OpcMessage_OneofMarshaler, _OpcMessage_OneofUnmarshaler, _OpcMessage_OneofSizer, []interface{}{
		(*OpcMessage_ValueString)(nil),
		(*OpcMessage_ValueInt32)(nil),
		(*OpcMessage_ValueInt64)(nil),
		(*OpcMessage_ValueFloat)(nil),
		(*OpcMessage_ValueDouble)(nil),
		(*OpcMessage_ValueBoolean)(nil),
	}
}

func _OpcMessage_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*OpcMessage)
	// value
	switch x := m.Value.(type) {
	case *OpcMessage_ValueString:
		b.EncodeVarint(5<<3 | proto1.WireBytes)
		b.EncodeStringBytes(x.ValueString)
	case *OpcMessage_ValueInt32:
		b.EncodeVarint(6<<3 | proto1.WireVarint)
		b.EncodeVarint(uint64(x.ValueInt32))
	case *OpcMessage_ValueInt64:
		b.EncodeVarint(7<<3 | proto1.WireVarint)
		b.EncodeVarint(uint64(x.ValueInt64))
	case *OpcMessage_ValueFloat:
		b.EncodeVarint(8<<3 | proto1.WireFixed32)
		b.EncodeFixed32(uint64(math.Float32bits(x.ValueFloat)))
	case *OpcMessage_ValueDouble:
		b.EncodeVarint(9<<3 | proto1.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.ValueDouble))
	case *OpcMessage_ValueBoolean:
		t := uint64(0)
		if x.ValueBoolean {
			t = 1
		}
		b.EncodeVarint(10<<3 | proto1.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("OpcMessage.Value has unexpected type %T", x)
	}
	return nil
}

func _OpcMessage_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*OpcMessage)
	switch tag {
	case 5: // value.value_string
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &OpcMessage_ValueString{x}
		return true, err
	case 6: // value.value_int32
		if wire != proto1.WireVarint {
			return true, proto1.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &OpcMessage_ValueInt32{int32(x)}
		return true, err
	case 7: // value.value_int64
		if wire != proto1.WireVarint {
			return true, proto1.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &OpcMessage_ValueInt64{int64(x)}
		return true, err
	case 8: // value.value_float
		if wire != proto1.WireFixed32 {
			return true, proto1.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Value = &OpcMessage_ValueFloat{math.Float32frombits(uint32(x))}
		return true, err
	case 9: // value.value_double
		if wire != proto1.WireFixed64 {
			return true, proto1.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &OpcMessage_ValueDouble{math.Float64frombits(x)}
		return true, err
	case 10: // value.value_boolean
		if wire != proto1.WireVarint {
			return true, proto1.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &OpcMessage_ValueBoolean{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _OpcMessage_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*OpcMessage)
	// value
	switch x := m.Value.(type) {
	case *OpcMessage_ValueString:
		n += proto1.SizeVarint(5<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(len(x.ValueString)))
		n += len(x.ValueString)
	case *OpcMessage_ValueInt32:
		n += proto1.SizeVarint(6<<3 | proto1.WireVarint)
		n += proto1.SizeVarint(uint64(x.ValueInt32))
	case *OpcMessage_ValueInt64:
		n += proto1.SizeVarint(7<<3 | proto1.WireVarint)
		n += proto1.SizeVarint(uint64(x.ValueInt64))
	case *OpcMessage_ValueFloat:
		n += proto1.SizeVarint(8<<3 | proto1.WireFixed32)
		n += 4
	case *OpcMessage_ValueDouble:
		n += proto1.SizeVarint(9<<3 | proto1.WireFixed64)
		n += 8
	case *OpcMessage_ValueBoolean:
		n += proto1.SizeVarint(10<<3 | proto1.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto1.RegisterType((*OpcMessage)(nil), "com.hashmapinc.tempus.edge.proto.OpcMessage")
}

func init() { proto1.RegisterFile("OpcMessage.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xcd, 0x6e, 0xe2, 0x30,
	0x14, 0x85, 0x31, 0xff, 0x5c, 0x66, 0x86, 0x51, 0x56, 0xd6, 0x6c, 0xc6, 0xa5, 0xaa, 0xea, 0x55,
	0x22, 0x01, 0xe2, 0x01, 0x28, 0x6a, 0xe9, 0xa2, 0x20, 0xa5, 0xbb, 0x6e, 0x22, 0xe3, 0x5c, 0x20,
	0x52, 0x62, 0x47, 0x89, 0xc3, 0x4b, 0xf5, 0x25, 0xab, 0xd8, 0x94, 0xb4, 0xab, 0xae, 0xac, 0xfb,
	0xe9, 0xf3, 0xd1, 0x91, 0x0e, 0xfc, 0xdd, 0xe5, 0xf2, 0x05, 0xcb, 0x52, 0x1c, 0xd1, 0xcf, 0x0b,
	0x6d, 0xb4, 0xc7, 0xa4, 0xce, 0xfc, 0x93, 0x28, 0x4f, 0x99, 0xc8, 0x13, 0x25, 0x7d, 0x83, 0x59,
	0x5e, 0x95, 0x3e, 0xc6, 0x9f, 0xc6, 0xbf, 0xc9, 0x2e, 0x97, 0x0f, 0x5a, 0x1d, 0x92, 0xa3, 0x03,
	0xd3, 0xf7, 0x0e, 0x40, 0x93, 0xe3, 0x3d, 0x41, 0x57, 0xe9, 0x18, 0x29, 0x61, 0x84, 0x8f, 0x67,
	0x73, 0xff, 0xa7, 0x40, 0xbf, 0xc9, 0xdb, 0xe5, 0x72, 0xab, 0x63, 0x0c, 0x6d, 0x80, 0xf7, 0x1f,
	0xc6, 0x31, 0x9e, 0x13, 0x89, 0x91, 0x12, 0x19, 0xd2, 0x36, 0x23, 0x7c, 0x14, 0x82, 0x43, 0x5b,
	0x91, 0xa1, 0x77, 0x0f, 0x93, 0x52, 0x57, 0x85, 0xc4, 0x28, 0x16, 0x06, 0x4d, 0x92, 0x21, 0xed,
	0x58, 0xe9, 0x8f, 0xc3, 0xeb, 0x0b, 0xb5, 0x22, 0x16, 0x67, 0x2c, 0x1a, 0xb1, 0x7b, 0x11, 0x2d,
	0xbe, 0x8a, 0xb7, 0xf0, 0xeb, 0x2c, 0xd2, 0x0a, 0xa3, 0xd2, 0x14, 0x89, 0x3a, 0xd2, 0x5e, 0x6d,
	0x6d, 0x5a, 0xe1, 0xd8, 0xd2, 0x57, 0x0b, 0xbd, 0x1b, 0x70, 0x67, 0x94, 0x28, 0x33, 0x9f, 0xd1,
	0x3e, 0x23, 0xbc, 0xb7, 0x69, 0x85, 0x60, 0xe1, 0x73, 0xcd, 0xbe, 0x29, 0xcb, 0x05, 0x1d, 0x30,
	0xc2, 0x3b, 0x5f, 0x95, 0xe5, 0xa2, 0x51, 0x0e, 0xa9, 0x16, 0x86, 0x0e, 0x19, 0xe1, 0xed, 0xab,
	0xf2, 0x58, 0xb3, 0xa6, 0x4d, 0xac, 0xab, 0x7d, 0x8a, 0x74, 0xc4, 0x08, 0x27, 0xd7, 0x36, 0x6b,
	0x0b, 0xbd, 0x3b, 0xf8, 0xed, 0xa4, 0xbd, 0xd6, 0x29, 0x0a, 0x45, 0x81, 0x11, 0x3e, 0xdc, 0xb4,
	0x42, 0xf7, 0x77, 0xe5, 0xe8, 0x6a, 0x00, 0x3d, 0x77, 0x4f, 0xdf, 0xea, 0x89, 0x83, 0x66, 0x91,
	0xc0, 0x2d, 0x12, 0xd4, 0x8b, 0x04, 0x76, 0x91, 0x7d, 0xdf, 0x3e, 0xf3, 0x8f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xa3, 0xbd, 0xe8, 0x5c, 0x1f, 0x02, 0x00, 0x00,
}
