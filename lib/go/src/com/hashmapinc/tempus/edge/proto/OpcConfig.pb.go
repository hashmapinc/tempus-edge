// Code generated by protoc-gen-go. DO NOT EDIT.
// source: OpcConfig.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// define available security types
type OpcConfig_SecurityType int32

const (
	OpcConfig_NONE           OpcConfig_SecurityType = 0
	OpcConfig_BASIC128RSA15  OpcConfig_SecurityType = 1
	OpcConfig_BASIC256       OpcConfig_SecurityType = 2
	OpcConfig_BASIC256SHA256 OpcConfig_SecurityType = 3
)

var OpcConfig_SecurityType_name = map[int32]string{
	0: "NONE",
	1: "BASIC128RSA15",
	2: "BASIC256",
	3: "BASIC256SHA256",
}
var OpcConfig_SecurityType_value = map[string]int32{
	"NONE":           0,
	"BASIC128RSA15":  1,
	"BASIC256":       2,
	"BASIC256SHA256": 3,
}

func (x OpcConfig_SecurityType) String() string {
	return proto1.EnumName(OpcConfig_SecurityType_name, int32(x))
}
func (OpcConfig_SecurityType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0, 0} }

// Define the configuration needed to work with OPC services.
type OpcConfig struct {
	Endpoint     string                   `protobuf:"bytes,1,opt,name=endpoint" json:"endpoint,omitempty"`
	SecurityType OpcConfig_SecurityType   `protobuf:"varint,2,opt,name=security_type,json=securityType,enum=com.hashmapinc.tempus.edge.proto.OpcConfig_SecurityType" json:"security_type,omitempty"`
	TagFilters   *OpcConfig_TagFilters    `protobuf:"bytes,3,opt,name=tag_filters,json=tagFilters" json:"tag_filters,omitempty"`
	TagRoot      *OpcConfig_OpcNode       `protobuf:"bytes,4,opt,name=tag_root,json=tagRoot" json:"tag_root,omitempty"`
	DeviceMaps   []*OpcConfig_DeviceMap   `protobuf:"bytes,5,rep,name=device_maps,json=deviceMaps" json:"device_maps,omitempty"`
	Subs         *OpcConfig_Subscriptions `protobuf:"bytes,6,opt,name=subs" json:"subs,omitempty"`
	// define subscription monitoring frequency
	SubsUpdateFreq uint32 `protobuf:"varint,7,opt,name=subs_update_freq,json=subsUpdateFreq" json:"subs_update_freq,omitempty"`
	// define identity
	ClientIdentity string `protobuf:"bytes,8,opt,name=client_identity,json=clientIdentity" json:"client_identity,omitempty"`
	ClientPassword string `protobuf:"bytes,9,opt,name=client_password,json=clientPassword" json:"client_password,omitempty"`
	// define reconnection params
	MaxRetries uint32 `protobuf:"varint,10,opt,name=max_retries,json=maxRetries" json:"max_retries,omitempty"`
	RetryDelay uint64 `protobuf:"varint,11,opt,name=retry_delay,json=retryDelay" json:"retry_delay,omitempty"`
}

func (m *OpcConfig) Reset()                    { *m = OpcConfig{} }
func (m *OpcConfig) String() string            { return proto1.CompactTextString(m) }
func (*OpcConfig) ProtoMessage()               {}
func (*OpcConfig) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *OpcConfig) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *OpcConfig) GetSecurityType() OpcConfig_SecurityType {
	if m != nil {
		return m.SecurityType
	}
	return OpcConfig_NONE
}

func (m *OpcConfig) GetTagFilters() *OpcConfig_TagFilters {
	if m != nil {
		return m.TagFilters
	}
	return nil
}

func (m *OpcConfig) GetTagRoot() *OpcConfig_OpcNode {
	if m != nil {
		return m.TagRoot
	}
	return nil
}

func (m *OpcConfig) GetDeviceMaps() []*OpcConfig_DeviceMap {
	if m != nil {
		return m.DeviceMaps
	}
	return nil
}

func (m *OpcConfig) GetSubs() *OpcConfig_Subscriptions {
	if m != nil {
		return m.Subs
	}
	return nil
}

func (m *OpcConfig) GetSubsUpdateFreq() uint32 {
	if m != nil {
		return m.SubsUpdateFreq
	}
	return 0
}

func (m *OpcConfig) GetClientIdentity() string {
	if m != nil {
		return m.ClientIdentity
	}
	return ""
}

func (m *OpcConfig) GetClientPassword() string {
	if m != nil {
		return m.ClientPassword
	}
	return ""
}

func (m *OpcConfig) GetMaxRetries() uint32 {
	if m != nil {
		return m.MaxRetries
	}
	return 0
}

func (m *OpcConfig) GetRetryDelay() uint64 {
	if m != nil {
		return m.RetryDelay
	}
	return 0
}

// define tag filter criteria
type OpcConfig_TagFilters struct {
	Whitelist []string `protobuf:"bytes,1,rep,name=whitelist" json:"whitelist,omitempty"`
	Blacklist []string `protobuf:"bytes,2,rep,name=blacklist" json:"blacklist,omitempty"`
}

func (m *OpcConfig_TagFilters) Reset()                    { *m = OpcConfig_TagFilters{} }
func (m *OpcConfig_TagFilters) String() string            { return proto1.CompactTextString(m) }
func (*OpcConfig_TagFilters) ProtoMessage()               {}
func (*OpcConfig_TagFilters) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0, 0} }

func (m *OpcConfig_TagFilters) GetWhitelist() []string {
	if m != nil {
		return m.Whitelist
	}
	return nil
}

func (m *OpcConfig_TagFilters) GetBlacklist() []string {
	if m != nil {
		return m.Blacklist
	}
	return nil
}

// Define an OPC Node
type OpcConfig_OpcNode struct {
	Namespace int32  `protobuf:"varint,1,opt,name=namespace" json:"namespace,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *OpcConfig_OpcNode) Reset()                    { *m = OpcConfig_OpcNode{} }
func (m *OpcConfig_OpcNode) String() string            { return proto1.CompactTextString(m) }
func (*OpcConfig_OpcNode) ProtoMessage()               {}
func (*OpcConfig_OpcNode) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0, 1} }

func (m *OpcConfig_OpcNode) GetNamespace() int32 {
	if m != nil {
		return m.Namespace
	}
	return 0
}

func (m *OpcConfig_OpcNode) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// define device mapping regex's (regex -> device)
type OpcConfig_DeviceMap struct {
	Pattern    string `protobuf:"bytes,1,opt,name=pattern" json:"pattern,omitempty"`
	DeviceName string `protobuf:"bytes,2,opt,name=device_name,json=deviceName" json:"device_name,omitempty"`
}

func (m *OpcConfig_DeviceMap) Reset()                    { *m = OpcConfig_DeviceMap{} }
func (m *OpcConfig_DeviceMap) String() string            { return proto1.CompactTextString(m) }
func (*OpcConfig_DeviceMap) ProtoMessage()               {}
func (*OpcConfig_DeviceMap) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0, 2} }

func (m *OpcConfig_DeviceMap) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func (m *OpcConfig_DeviceMap) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

// define subscriptions
type OpcConfig_Subscriptions struct {
	Nodes []*OpcConfig_Subscriptions_Subscription `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *OpcConfig_Subscriptions) Reset()                    { *m = OpcConfig_Subscriptions{} }
func (m *OpcConfig_Subscriptions) String() string            { return proto1.CompactTextString(m) }
func (*OpcConfig_Subscriptions) ProtoMessage()               {}
func (*OpcConfig_Subscriptions) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0, 3} }

func (m *OpcConfig_Subscriptions) GetNodes() []*OpcConfig_Subscriptions_Subscription {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type OpcConfig_Subscriptions_Subscription struct {
	Node       *OpcConfig_OpcNode `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	DeviceName string             `protobuf:"bytes,2,opt,name=device_name,json=deviceName" json:"device_name,omitempty"`
}

func (m *OpcConfig_Subscriptions_Subscription) Reset()         { *m = OpcConfig_Subscriptions_Subscription{} }
func (m *OpcConfig_Subscriptions_Subscription) String() string { return proto1.CompactTextString(m) }
func (*OpcConfig_Subscriptions_Subscription) ProtoMessage()    {}
func (*OpcConfig_Subscriptions_Subscription) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{0, 3, 0}
}

func (m *OpcConfig_Subscriptions_Subscription) GetNode() *OpcConfig_OpcNode {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *OpcConfig_Subscriptions_Subscription) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func init() {
	proto1.RegisterType((*OpcConfig)(nil), "com.hashmapinc.tempus.edge.proto.OpcConfig")
	proto1.RegisterType((*OpcConfig_TagFilters)(nil), "com.hashmapinc.tempus.edge.proto.OpcConfig.TagFilters")
	proto1.RegisterType((*OpcConfig_OpcNode)(nil), "com.hashmapinc.tempus.edge.proto.OpcConfig.OpcNode")
	proto1.RegisterType((*OpcConfig_DeviceMap)(nil), "com.hashmapinc.tempus.edge.proto.OpcConfig.DeviceMap")
	proto1.RegisterType((*OpcConfig_Subscriptions)(nil), "com.hashmapinc.tempus.edge.proto.OpcConfig.Subscriptions")
	proto1.RegisterType((*OpcConfig_Subscriptions_Subscription)(nil), "com.hashmapinc.tempus.edge.proto.OpcConfig.Subscriptions.Subscription")
	proto1.RegisterEnum("com.hashmapinc.tempus.edge.proto.OpcConfig_SecurityType", OpcConfig_SecurityType_name, OpcConfig_SecurityType_value)
}

func init() { proto1.RegisterFile("OpcConfig.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 591 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x4d, 0x6f, 0xdb, 0x3c,
	0x0c, 0xc7, 0x1f, 0x27, 0x69, 0x13, 0xd3, 0x49, 0x9a, 0x47, 0x27, 0x23, 0x18, 0x30, 0xa3, 0x97,
	0xf9, 0x94, 0xa0, 0x29, 0xda, 0x75, 0xc7, 0xbe, 0x2c, 0x6b, 0x0f, 0x4d, 0x07, 0xa5, 0xdb, 0x80,
	0x61, 0x83, 0xa1, 0xd8, 0x6c, 0x2a, 0x2c, 0xb6, 0x54, 0x4b, 0x59, 0x9b, 0x6f, 0xb2, 0x6f, 0xb8,
	0xaf, 0x31, 0x48, 0x76, 0x5e, 0x7a, 0x2a, 0xd2, 0x93, 0xc4, 0x1f, 0xc9, 0xbf, 0x28, 0x93, 0x32,
	0xec, 0xdd, 0xc8, 0xf8, 0x5c, 0x64, 0x77, 0x7c, 0xda, 0x93, 0xb9, 0xd0, 0x82, 0x04, 0xb1, 0x48,
	0x7b, 0xf7, 0x4c, 0xdd, 0xa7, 0x4c, 0xf2, 0x2c, 0xee, 0x69, 0x4c, 0xe5, 0x5c, 0xf5, 0x30, 0x99,
	0x62, 0x11, 0xb1, 0xff, 0xc7, 0x05, 0x77, 0x95, 0x45, 0xba, 0xd0, 0xc0, 0x2c, 0x91, 0x82, 0x67,
	0xda, 0x77, 0x02, 0x27, 0x74, 0xe9, 0xca, 0x26, 0x3f, 0xa1, 0xa5, 0x30, 0x9e, 0xe7, 0x5c, 0x2f,
	0x22, 0xbd, 0x90, 0xe8, 0x57, 0x02, 0x27, 0x6c, 0x0f, 0x4e, 0x7a, 0x2f, 0x9d, 0xd1, 0x5b, 0x57,
	0x35, 0x2e, 0x05, 0x6e, 0x17, 0x12, 0x69, 0x53, 0x6d, 0x58, 0xe4, 0x1b, 0x78, 0x9a, 0x4d, 0xa3,
	0x3b, 0x3e, 0xd3, 0x98, 0x2b, 0xbf, 0x1a, 0x38, 0xa1, 0x37, 0x38, 0xde, 0x46, 0xfc, 0x96, 0x4d,
	0x87, 0x45, 0x36, 0x05, 0xbd, 0xda, 0x93, 0x11, 0x34, 0x8c, 0x70, 0x2e, 0x84, 0xf6, 0x6b, 0x56,
	0xf5, 0x70, 0x1b, 0xd5, 0x1b, 0x19, 0x8f, 0x44, 0x82, 0xb4, 0xae, 0xd9, 0x94, 0x0a, 0xa1, 0xc9,
	0x57, 0xf0, 0x12, 0xfc, 0xcd, 0x63, 0x8c, 0x52, 0x26, 0x95, 0xbf, 0x13, 0x54, 0x43, 0x6f, 0x70,
	0xb4, 0x8d, 0xe4, 0x85, 0x4d, 0xbf, 0x66, 0x92, 0x42, 0xb2, 0xdc, 0x2a, 0x72, 0x0d, 0x35, 0x35,
	0x9f, 0x28, 0x7f, 0xd7, 0xd6, 0xf8, 0x61, 0xab, 0xcf, 0x3a, 0x9f, 0xa8, 0x38, 0xe7, 0x52, 0x73,
	0x91, 0x29, 0x6a, 0x65, 0x48, 0x08, 0x1d, 0xb3, 0x46, 0x73, 0x99, 0x30, 0x8d, 0xd1, 0x5d, 0x8e,
	0x0f, 0x7e, 0x3d, 0x70, 0xc2, 0x16, 0x6d, 0x1b, 0xfe, 0xc5, 0xe2, 0x61, 0x8e, 0x0f, 0xe4, 0x1d,
	0xec, 0xc5, 0x33, 0x8e, 0x99, 0x8e, 0x78, 0x82, 0x99, 0xe6, 0x7a, 0xe1, 0x37, 0x6c, 0xef, 0xdb,
	0x05, 0xbe, 0x2a, 0xe9, 0x46, 0xa0, 0x64, 0x4a, 0x3d, 0x8a, 0x3c, 0xf1, 0xdd, 0xcd, 0xc0, 0xcf,
	0x25, 0x25, 0x6f, 0xc1, 0x4b, 0xd9, 0x53, 0x94, 0xa3, 0xce, 0x39, 0x2a, 0x1f, 0xec, 0xb1, 0x90,
	0xb2, 0x27, 0x5a, 0x10, 0x13, 0x60, 0x9c, 0x8b, 0x28, 0xc1, 0x19, 0x5b, 0xf8, 0x5e, 0xe0, 0x84,
	0x35, 0x0a, 0x16, 0x5d, 0x18, 0xd2, 0xbd, 0x04, 0x58, 0xb7, 0x93, 0xbc, 0x01, 0xf7, 0xf1, 0x9e,
	0x6b, 0x9c, 0x71, 0x65, 0xe6, 0xb2, 0x1a, 0xba, 0x74, 0x0d, 0x8c, 0x77, 0x32, 0x63, 0xf1, 0x2f,
	0xeb, 0xad, 0x14, 0xde, 0x15, 0xe8, 0xbe, 0x87, 0x7a, 0xd9, 0x42, 0x13, 0x98, 0xb1, 0x14, 0x95,
	0x64, 0x31, 0xda, 0xf1, 0xde, 0xa1, 0x6b, 0x40, 0xda, 0x50, 0xe1, 0x89, 0x1d, 0x6a, 0x97, 0x56,
	0x78, 0xd2, 0x1d, 0x82, 0xbb, 0x6a, 0x14, 0xf1, 0xa1, 0x2e, 0x99, 0xd6, 0x98, 0x67, 0xe5, 0xbb,
	0x58, 0x9a, 0xe6, 0x2a, 0xe5, 0x38, 0x18, 0xa9, 0x32, 0xbf, 0xec, 0xeb, 0x88, 0xa5, 0xd8, 0xfd,
	0xeb, 0x40, 0xeb, 0x59, 0x83, 0xc8, 0x0f, 0xd8, 0xc9, 0x44, 0x82, 0xca, 0x5e, 0xc5, 0x1b, 0x0c,
	0x5f, 0xdd, 0xea, 0x67, 0x16, 0x2d, 0x44, 0xbb, 0x4f, 0xd0, 0xdc, 0xc4, 0xe4, 0x13, 0xd4, 0x8c,
	0xc3, 0xd6, 0xfd, 0xca, 0xd9, 0xb7, 0x02, 0x2f, 0xde, 0x74, 0xff, 0x1a, 0x9a, 0x9b, 0x0f, 0x9c,
	0x34, 0xa0, 0x36, 0xba, 0x19, 0x7d, 0xec, 0xfc, 0x47, 0xfe, 0x87, 0xd6, 0xd9, 0xe9, 0xf8, 0xea,
	0xfc, 0x60, 0x70, 0x42, 0xc7, 0xa7, 0x07, 0x47, 0x1d, 0x87, 0x34, 0xa1, 0x61, 0xd1, 0xe0, 0xe8,
	0xb8, 0x53, 0x21, 0x04, 0xda, 0x4b, 0x6b, 0x7c, 0x79, 0x6a, 0x58, 0xf5, 0x6c, 0xff, 0xbb, 0xf9,
	0x7d, 0xf5, 0xd7, 0xb5, 0xf6, 0x8b, 0x5a, 0xfb, 0xa6, 0xd6, 0xbe, 0xad, 0x75, 0xb2, 0x6b, 0x97,
	0xc3, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x09, 0x1b, 0xe9, 0x72, 0xfa, 0x04, 0x00, 0x00,
}
